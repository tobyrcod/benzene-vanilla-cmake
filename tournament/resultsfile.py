import time

# Stores summary information about each game played.
class ResultsFile:
    def __init__(self, name, header):
        self._name = name
        self._wasExisting = self._checkExisting()
        if self._wasExisting:
            self._lastIndex = self._findLastIndex()
            self._printTimeStamp()
        else:
            self._lastIndex = -1
            self._printHeader(header)
        self._result_keys = ['GAME', 'ROUND', 'OPENING', 'BLACK', 'WHITE', 'RES_B', 'RES_W', 'LENGTH', 'TIME_B', 'TIME_W',
                       'ERR',
                       'ERR_MSG']

    def getResultString(self, gameIndex, currentRound, opening, blackName, whiteName,
                  resultBlack, resultWhite, gameLen,
                  elapsedBlack, elapsedWhite,
                  error, errorMessage):
        return f"{gameIndex:04d}\t{int(currentRound)}\t{opening}\t{blackName}\t{whiteName}\t{resultBlack}\t{resultWhite}\t{gameLen}\t{elapsedBlack:.1f}\t{elapsedWhite:.1f}\t{error}\t{errorMessage}\n"

    def addResult(self, currentRound, opening, blackName, whiteName,
                  resultBlack, resultWhite, gameLen,
                  elapsedBlack, elapsedWhite,
                  error, errorMessage, gameIndex=-1):
        if gameIndex == -1:
            # We are playing a new game index for the first time
            self._lastIndex += 1
            with open(self._name, "a") as f:
                f.write(self.getResultString(self._lastIndex, currentRound, opening, blackName, whiteName, resultBlack, resultWhite, gameLen, elapsedBlack, elapsedWhite, error, errorMessage))
        else:
            # We are replacing a previously played game

            # Get the current file
            with open(self._name, 'r') as f:
                lines = f.readlines()

            # Change the one line we want to replace
            for i, line in enumerate(lines):
                if not line:
                    continue

                if line[0] == '#':
                    continue

                # Parse the result line into values
                result = line.strip().split(sep='\t', maxsplit=11)
                result = dict(zip(self._result_keys, result))

                # Find and replace the right line
                if int(result['GAME']) != gameIndex:
                    continue
                lines[i] = self.getResultString(gameIndex, currentRound, opening, blackName, whiteName, resultBlack, resultWhite, gameLen, elapsedBlack, elapsedWhite, error, errorMessage)

            # Write out the new file with the line changed
            with open(self._name, 'w') as file:
                file.writelines(lines)


    def getFailedResults(self):
        # TODO: combine with utils results loader stuffs this was stolen from

        failed = []
        with open(self._name, "r") as f:
            for line in f:
                if not line:
                    continue

                if line[0] == '#':
                    continue

                # Parse the result line into values
                result = line.strip().split(sep='\t', maxsplit=11)
                result = dict(zip(self._result_keys, result))

                # Perform metadata results checks
                if result['ERR'] == '1':  # The game isn't complete
                    failed.append(result)
        return failed

    def wasExisting(self):
        return self._wasExisting

    def clear(self):
        with open(self._name, "w"):
            pass
        self._printHeader()
        self._gameIndex = -1
        self._wasExisting = False

    def getLastIndex(self):
        return self._lastIndex

    def _checkExisting(self):
        try:
            with open(self._name, "r"):
                return True
        except IOError:
            return False

    def _findLastIndex(self):
        last = -1
        with open(self._name, "r") as f:
            for line in f:
                if line[0] != "#":
                    array = line.split("\t")
                    last = int(array[0])
        return last

    def _printHeader(self, infolines):
        with open(self._name, "w") as f:
            f.write("# Game results file generated by twogtp.py.\n#\n")
            for l in infolines:
                f.write(f"# {l}\n")
            f.write("#\n"
                    "# GAME\tROUND\tOPENING\tBLACK\tWHITE\tRES_B\tRES_W\tLENGTH\tTIME_B\tTIME_W\tERR\tERR_MSG\n#\n")
        self._printTimeStamp()

    def _printTimeStamp(self):
        with open(self._name, "a") as f:
            timeStamp = time.strftime("%Y-%m-%d %X %Z", time.localtime())
            f.write("# Date: " + timeStamp + "\n")

    def printMessage(self, title:str, message: str):
        with open(self._name, "a") as f:
            f.write(f"# {title}: {message}\n")